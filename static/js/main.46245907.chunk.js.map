{"version":3,"sources":["logo.svg","utils/index.js","Components/Dashain/index.js","App.js","reportWebVitals.js","index.js"],"names":["convertNepaliDigit","num","numbers","toString","split","map","n","Number","join","DashainCountdown","calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","setYear","loading","setLoading","useEffect","timer","setTimeout","clearTimeout","timerComponents","Object","keys","forEach","interval","push","className","text","length","App","Dashain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,I,4BCCFA,EAAqB,SAACC,GAC/B,IAAMC,EAAU,CACZ,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,SACH,EAAG,UASP,OAPqBD,EAAIE,WAAWC,MAAM,IAAIC,KAAI,SAAAC,GAC9C,MAAS,MAANA,GAAmB,MAANA,EACLA,EAGJJ,EAAQK,OAAOD,OAENE,KAAK,K,eCoEdC,EAnFU,WACrB,IAAMC,EAAoB,WACtB,IAAIC,GAAO,IAAIC,MAAOC,cAChBC,GAAc,IAAIF,KAAJ,gBAAkBD,KAAW,IAAIC,KACjDG,EAAW,GAWf,OATGD,EAAa,IACZC,EAAW,CACPC,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAuB,IACpDM,QAASH,KAAKC,MAAOJ,EAAa,IAAO,GAAM,IAC/CO,QAASJ,KAAKC,MAAOJ,EAAa,IAAQ,MAI3CC,GAGX,EAAgCO,mBAASZ,KAAzC,mBAAOK,EAAP,KAAiBQ,EAAjB,KACA,EAAwBD,oBAAS,IAAIV,MAAOC,eAA5C,mBAAOF,EAAP,KAAaa,EAAb,KAEA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBN,EAAYb,KACZc,GAAQ,IAAIZ,MAAOC,iBACpB,KACH,OAAO,kBAAMiB,aAAaF,OAG9BD,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAW,KACZ,KACH,OAAO,kBAAMI,aAAaF,MAC3B,IAEH,IAAMG,EAAkB,GAaxB,OAZAC,OAAOC,KAAKlB,GAAUmB,SAAQ,SAACC,GACvBpB,EAASoB,IAIbJ,EAAgBK,KACZ,iCACKrB,EAASoB,GADd,IAC0BA,EAAU,WAMxC,sBAAKE,UAAU,KAAf,UACI,oBAAGA,UAAU,UAAb,cAAwB,6BACpB,cAAC,IAAD,CACAC,KAAM,CAAC,uEAAD,kBAA6B3B,WAIvC,4BACKc,EAAU,GAAK,8BAERM,EAAgBQ,OAAS,gCACrB,qBAAKF,UAAU,aAAf,SACKN,IAEL,sBAAKM,UAAU,YAAf,UACI,qCAAQrC,EAAmBe,EAASC,MAApC,0BACA,iCAAOhB,EAAmBe,EAASI,OAAnC,sCACA,qCAAQnB,EAAmBe,EAASK,SAApC,sCACA,iCAAOpB,EAAmBe,EAASM,SAAnC,qDARiB,QAUnB,6DCnEfmB,MARf,WACE,OACE,qBAAKH,UAAU,MAAf,SACE,cAACI,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46245907.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nexport const convertNepaliDigit = (num) => {\n    const numbers = {\n        0: '०',\n        1: '१',\n        2: '२',\n        3: '३',\n        4: '४',\n        5: '५',\n        6: '६',\n        7: '७',\n        8: '८',\n        9: '९'\n    }\n    const convertArray = num.toString().split('').map(n => {\n        if(n === '.' || n === ',') {\n            return n;\n        }\n\n        return numbers[Number(n)];\n    })\n    return convertArray.join('');\n}\n","import React, { useEffect, useState }  from 'react';\n\nimport ReactTypingEffect from 'react-typing-effect';\nimport { convertNepaliDigit } from '../../utils';\nimport './style.css';\n\nconst DashainCountdown = () => {\n    const calculateTimeLeft = () => {\n        let year = new Date().getFullYear();\n        const difference = +new Date(`10/12/${year}`) - +new Date();\n        let timeLeft = {};\n\n        if(difference > 0) {\n            timeLeft = {\n                days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n                minutes: Math.floor((difference / 1000 / 60) % 60),\n                seconds: Math.floor((difference / 1000) % 60)\n            };\n        }\n\n        return timeLeft;\n    };\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    const [year, setYear] = useState(new Date().getFullYear());\n\n    const [loading, setLoading] = useState(true);\n\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n            setYear(new Date().getFullYear());\n        }, 1000);\n        return () => clearTimeout(timer);\n    });\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setLoading(false)\n        }, 7000);\n        return () => clearTimeout(timer);\n    }, []);\n\n    const timerComponents = [];\n    Object.keys(timeLeft).forEach((interval) => {\n        if(!timeLeft[interval]) {\n            return;\n        }\n\n        timerComponents.push(\n            <span>\n                {timeLeft[interval]} {interval}{\" \"}\n            </span>\n        );\n    });\n\n    return (\n        <div className=\"ct\">\n            <p className=\"heading\"> <h1>\n                <ReactTypingEffect\n                text={[\"बडा दशैँ २०७८\", `Dashain ${year}`]}\n                />\n            </h1>\n            </p>\n            <p>\n                {loading ? '' : <div>\n                    {\n                        timerComponents.length ? <div>\n                            <div className=\"english-ct\">\n                                {timerComponents}\n                            </div>\n                            <div className=\"nepali-ct\">\n                                <span> {convertNepaliDigit(timeLeft.days)} दिन </span>\n                                <span>{convertNepaliDigit(timeLeft.hours)} घण्टा </span>\n                                <span> {convertNepaliDigit(timeLeft.minutes)} मिनेट </span>\n                                <span>{convertNepaliDigit(timeLeft.seconds)} सेकेन्ड </span>\n                            </div>  </div>\n                            : <span>Dashain is here!!</span>\n                    }\n                </div>\n                }\n            </p>\n        </div>\n    )\n\n}\n\nexport default DashainCountdown;\n","import logo from './logo.svg';\nimport './App.css';\nimport DashainCountdown from './Components/Dashain';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DashainCountdown/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}